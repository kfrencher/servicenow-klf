<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_912467_klf.GroupUtils</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>GroupUtils</name>
        <script><![CDATA[/**
 * Utility functions for Group (sys_user_group) table
 * 
 * Some of the functions include:
 * - isMemberOfSomeGroup: Returns true if the user is a member of any of the groups
 * - getGroupSysIdsForUser: Returns the list of sys_user_group.sys_id for the user
 * - getGroupByName: Returns the sys_user_group record with the given name
 * - isMemberOf: Returns true is the user is a member of the sys_user_group
 * - createGroup: Creates a new sys_user_group record   
 * - createUser: Creates a new sys_user record
 * - addUserToGroup: Adds a user to a group
 */
//@ts-ignore
var x_912467_klf = x_912467_klf || {};

/**
 * Utility functions for sys_user_group
 */
x_912467_klf.GroupUtils = (function() {
    const glideRecordUtils = new global.KLF_GlideRecordUtils();

    class GroupUtils {


        /**
         * Returns true if the user is a member of any of the groups
         * @param {string} userSysId 
         * @param {string[]|string} groupSysIds sys_user_group.sys_id[] or concatenated string of sys_user_group.sys_id
         * @returns {boolean}
         */
        isMemberOfSomeGroup(userSysId, groupSysIds) {
            const groupMember = new GlideRecord('sys_user_grmember');
            groupMember.addQuery('user', userSysId);
            groupMember.addQuery('group', 'IN', groupSysIds);
            groupMember.query();
            return groupMember.hasNext();
        }

        /**
         * Returns the list of sys_user_group.sys_id for the user
         * @param {string} userSysId - The sys_user.sys_id
         * @returns {string[]} - The list of sys_user_group.sys_id
         */
        getGroupSysIdsForUser(userSysId) {
            const gr = new GlideRecord('sys_user_grmember');
            gr.addQuery('user', userSysId);
            gr.query();
            const groupSysIds = [];
            while (gr.next()) {
                groupSysIds.push(gr.group.toString());
            }
            return groupSysIds;
        }

        /**
         * Returns the sys_user_group record with the given name
         * @param {string} groupName - The name of the group to find
         * @returns {?GlideRecord} - The sys_user_group record
         */
        getGroupByName(groupName) {
            const group = new GlideRecord('sys_user_group');
            if (group.get('name', groupName)) {
                return group;
            } else {
                return null;
            }
        }


        /**
         * Returns true is the user is a member
         * of the sys_user_group
         * @param {string} groupSysId sys_user_group.sys_id
         * @param {string} userSysId sys_user.sys_id
         * @returns {boolean}
         */
        isMemberOf(groupSysId, userSysId) {
            const gr = new GlideRecord('sys_user_grmember');
            gr.addQuery('group', groupSysId);
            gr.addQuery('user', userSysId);
            gr.query();
            return gr.hasNext();
        }

        /**
         * Creates a new sys_user_group record
         * @param {string} groupName - The name of the group to create
         * @returns {GlideRecord} - The newly created sys_user_group record
         */
        createGroup(groupName) {
            return glideRecordUtils.insertRecord('sys_user_group', {
                name: groupName
            });
        }

        /**
         * Creates a new sys_user record
         * @param {string} userName - The name of the user to create
         * @returns {GlideRecord} 
         */
        createUser(userName) {
            return glideRecordUtils.insertRecord('sys_user', {
                user_name: userName,
                first_name: userName + 'first',
                last_name: userName + 'last',
                email: userName + '@example.com'
            });
        }

        /**
         * Adds a user to a group
         * @param {GlideRecord} user - The user to add to the group
         * @param {GlideRecord} group - The group to add the user to
         */
        addUserToGroup(user, group) {
            glideRecordUtils.insertRecord('sys_user_grmember', {
                user: user.getUniqueValue(),
                group: group.getUniqueValue()
            });
        }
    }

    return new GroupUtils();

})();]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-01-29 14:22:17</sys_created_on>
        <sys_id>1a22433f97206550b2e1f97e6253af22</sys_id>
        <sys_mod_count>13</sys_mod_count>
        <sys_name>GroupUtils</sys_name>
        <sys_package display_value="KLF" source="x_912467_klf">4fd1a55197682910b2e1f97e6253af4b</sys_package>
        <sys_policy/>
        <sys_scope display_value="KLF">4fd1a55197682910b2e1f97e6253af4b</sys_scope>
        <sys_update_name>sys_script_include_1a22433f97206550b2e1f97e6253af22</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-08-04 14:29:51</sys_updated_on>
    </sys_script_include>
</record_update>
