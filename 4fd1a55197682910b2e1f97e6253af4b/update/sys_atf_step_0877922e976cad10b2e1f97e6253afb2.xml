<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_atf_step">
    <sys_atf_step action="INSERT_OR_UPDATE">
        <active>true</active>
        <copied_from/>
        <description>Run Server Side Validation Script</description>
        <display_name>Run Server Side Script</display_name>
        <inputs/>
        <mugshots_cache_json/>
        <notes/>
        <order>1</order>
        <step_config display_value="Run Server Side Script">41de4a935332120028bc29cac2dc349a</step_config>
        <sys_class_name>sys_atf_step</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-01-25 14:03:41</sys_created_on>
        <sys_id>0877922e976cad10b2e1f97e6253afb2</sys_id>
        <sys_name>Run Server Side Script</sys_name>
        <sys_package display_value="KLF" source="x_912467_klf">4fd1a55197682910b2e1f97e6253af4b</sys_package>
        <sys_policy/>
        <sys_scope display_value="KLF">4fd1a55197682910b2e1f97e6253af4b</sys_scope>
        <sys_update_name>sys_atf_step_0877922e976cad10b2e1f97e6253afb2</sys_update_name>
        <table/>
        <test display_value="TestUtils">0867122e976cad10b2e1f97e6253af08</test>
        <timeout/>
        <warning_message/>
    </sys_atf_step>
    <sys_variable_value action="delete_multiple" query="document_key=0877922e976cad10b2e1f97e6253afb2"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_atf_step</document>
        <document_key>0877922e976cad10b2e1f97e6253afb2</document_key>
        <order>200</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-01-25 14:03:41</sys_created_on>
        <sys_id>b287522e976cad10b2e1f97e6253afa6</sys_id>
        <sys_mod_count>28</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-01-26 15:28:45</sys_updated_on>
        <value>(function(outputs, steps, params, stepResult, assertEqual) {
    /**
     * I'm using this common beforeAll function in each describe because they all
     * do the same thing
     */
    function commonBeforeAll() {
        try {
            gs.debug('testing to see if i can log');
            // I'm always using test1 as the test name that is created
            // so before each test i'm removing the test data that the previous
            // test generated
            var testGrDelete = new GlideRecord('sys_atf_test');
            testGrDelete.addQuery('name', 'test1');
            new global.KLF_GlideRecordUtils().deleteRecordTemplate('sys_atf_test',
                testGrDelete.getEncodedQuery());
        } catch(e) {
            gs.error(e);
        }
    };

    /**
     * Returns an unsaved sys_atf_test record with the
     * sys_atf_test.name filled in
     * @param {string} name sys_atf_test.name Name of the test
     * @returns {GlideRecord} Unsaved sys_atf_test
     */
    function createTest(name) {
        var test = new GlideRecord('sys_atf_test');
        test.newRecord();
        test.name = name;
        
        return test;

    }

    /**
     * @typedef {Object} StepData
     * @property {string} testSysId sys_atf_test.sys_id The parent test
     * @property {string} stepConfigId sys_atf_step_config.sys_id The related step config
     */
    /**
     * Returns an unsaved sys_atf_step record that is a child
     * of the sys_atf_test.sys_id passed in.
     * @param {StepData} stepData
     */
    function createStep(stepData) {
        var step = new GlideRecord('sys_atf_step');
        step.newRecord();
        step.test = stepData.testSysId;
        step.step_config = stepData.stepConfigId;
        return step;
    }

    /**
     * Returns the retrieved sys_atf_step_config GlideRecord
     * @param {string} name sys_atf_step_config.name
     * @returns {GlideRecord} sys_atf_step_config
     */
    function getStepConfigByName(name) {
        var stepConfig = new GlideRecord('sys_atf_step_config');
        if(stepConfig.get('name', name)) {
            return stepConfig;
        } else {
            throw 'Could not find step config using step config name: ' + name;
        }
    }

    describe('TestUtils.getMaxStepOrder', function() {
        beforeAll(commonBeforeAll);

        // Creating a test with three steps and getting the max
        // order number. Should be 3 because there are 3 steps
        var test = createTest('test1');
        test.update();
        [
            createStep({
                testSysId: test.getUniqueValue(),
                stepConfigId: getStepConfigByName('Log').getUniqueValue()
            }),
            createStep({
                testSysId: test.getUniqueValue(),
                stepConfigId: getStepConfigByName('Log').getUniqueValue()
            }),
            createStep({
                testSysId: test.getUniqueValue(),
                stepConfigId: getStepConfigByName('Log').getUniqueValue()
            })
        ].forEach(function(step) {
            step.update();
        });
        it('Should return the max order number', function() {
            var maxStepOrder = TestUtils.getMaxStepOrder(test.getUniqueValue());
            expect(maxStepOrder).toEqual(3);
        });
    });

    describe('TestUtils.copyTest', function() {
        beforeAll(commonBeforeAll);

        // Creating a test with a couple steps in it. The copied
        // test should be a new test instance with matching test
        // steps
        var test = createTest('test1');
        test.update();
        var logConfig = getStepConfigByName('Log');
        var expectedStepCount = 2;
        var expectedStepConfig = logConfig;
        [
            createStep({
                testSysId: test.getUniqueValue(),
                stepConfigId: logConfig.getUniqueValue()
            }),
            createStep({
                testSysId: test.getUniqueValue(),
                stepConfigId: logConfig.getUniqueValue()
            })
        ].forEach(function(step) {
            step.update();
        });

        it('Should create copy of a test including all steps', function() {
            var testCopySysId = TestUtils.copyTest(test.getUniqueValue());
            var testCopy = new GlideRecord('sys_atf_test');

            // Checking to see the test copy exists
            expect(testCopy.get(testCopySysId)).toBe(true);

            var step = new GlideRecord('sys_atf_step');
            step.addQuery('test', testCopy.getUniqueValue());
            step.query();

            // Checking to see there are the right amount of steps
            expect(step.getRowCount()).toBe(expectedStepCount);

            while(step.next()) {
                // Checking to see that the step config is correct
                expect(step.getValue('step_config')).toBe(logConfig.getUniqueValue());
            }
        });
    });

    describe('TestUtils.updateStepOrder', function() {
        beforeAll(commonBeforeAll);
        // Creating a test with three steps 
        // The order in the three steps should initially be
        // 1, 2, 3. I'm then updating that order to a number
        // greater than 3, so we expect the order to start with
        // the new start order
        var test = createTest('test1');
        test.update();
        [
            createStep({
                testSysId: test.getUniqueValue(),
                stepConfigId: getStepConfigByName('Log').getUniqueValue()
            }),
            createStep({
                testSysId: test.getUniqueValue(),
                stepConfigId: getStepConfigByName('Log').getUniqueValue()
            }),
            createStep({
                testSysId: test.getUniqueValue(),
                stepConfigId: getStepConfigByName('Log').getUniqueValue()
            })
        ].forEach(function(step) {
            step.update();
        });

        it('should update the order in all steps', function() {
            var expectedOrderStart = 10;
            TestUtils.updateStepOrder(test.getUniqueValue(), expectedOrderStart);

            var step = new GlideRecord('sys_atf_step');
            step.addQuery('test', test.getUniqueValue());
            step.query();
            var expectedOrder = expectedOrderStart;
            while(step.next()) {
                expectedOrder = expectedOrder + 1;
                expect(parseInt(step.getValue('order'))).toBe(expectedOrder);
            }
        });
    });

    describe('Rollback between describe', function() {
        beforeAll(commonBeforeAll);

        it('should rollback data between describes', function() {
            var test = new GlideRecord('sys_atf_test');
            test.addQuery('name', 'test1');
            test.query();
            gs.debug('test rowcount: ' + test.getRowCount());
            expect(test.getRowCount()).toBe(0);
            expect(test.get('name', 'test1')).toBe(false);
        });
    });

})(outputs, steps, params, stepResult, assertEqual);

jasmine.getEnv().execute();
</value>
        <variable display_value="Test script">989d9e235324220002c6435723dc3484</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_atf_step</document>
        <document_key>0877922e976cad10b2e1f97e6253afb2</document_key>
        <order>100</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-01-25 14:03:41</sys_created_on>
        <sys_id>ba87522e976cad10b2e1f97e6253afa5</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-01-25 14:03:41</sys_updated_on>
        <value>3.1</value>
        <variable display_value="Jasmine version">42f2564b73031300440211d8faf6a777</variable>
    </sys_variable_value>
</record_update>
